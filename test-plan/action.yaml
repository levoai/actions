name: "Levo Test Action"
description: "Run Levo Security tests in your Github workflows"
inputs:
  plan:
    description: 'Test plan LRN'
    required: true
  target:
    description: 'Target URL to the unit under test'
    required: true
  authorization-key:
    description: 'Authorization key for CLI to run. Get it from https://app.levo.ai/settings/keys'
    required: true
  organization-id:
    description: 'Levo Organization ID'
    required: true
  fail-on-failed-tests:
    description: 'Fail action on failed test cases. Default: true'
    required: true
    default: 'true'
  base64_env:
    description: 'environment.yaml file content base64 encoded'
    required: false
    default: ''
  saas-url:
    description: 'Saas url to report results back'
    required: true
    default: "https://api.levo.ai"
  report:
    description: 'Report test run results to Levo'
    required: false
    default: 'true'
  cli_extra_args:
    description: 'CLI extra arguments. E.g: -H "Authorization: Bearer 123'
    required: false
    default: ""
  debug:
    description: 'Debug action'
    required: false
    default: 'false'
outputs:
  success:
    description: 'Succeeded test cases'
    value: ${{ steps.test-summary.outputs.passed }}
  failed:
    description: 'Failed test cases'
    value: ${{ steps.test-summary.outputs.failed }}
  skipped:
    description: 'Skipped test cases'
    value: ${{ steps.test-summary.outputs.skipped }}
  total:
    description: 'Total test cases'
    value: ${{ steps.test-summary.outputs.total }}
runs:
  using: 'composite'
  steps:
    - id: run-test-plan
      run: |
        # Enable aliases since this is non-interactive shell
        shopt -s expand_aliases
        export LOCAL_UID=`id -u`
        export LOCAL_GID=`id -g`
        mkdir $PWD/reports
        docker_engine_version=$(docker version -f '{{range .Server.Components}}{{if eq .Name "Engine"}}{{.Version}}{{end}}{{end}}')
        IFS=. read major minor patch <<<"${docker_engine_version%%*-}"
        if [[ $major -gt 20 ]] || [[ $major -eq 20 && $minor -gt 0 ]] || [[ $major -eq 20 && $minor -eq 0 && $patch -ge 4 ]]; then
          docker_host_ip=host-gateway
        else
          docker_host_ip=`ip route|awk '/docker0/ { print $9 }'`
          if [ -z $docker_host_ip ]; then
            docker_host_ip=172.17.0.1
            echo "::warning ::Could not resolve Docker host IP dynamically, using $docker_host_ip"
          fi
        fi
        alias levo="sudo docker run --rm --add-host=host.docker.internal:$docker_host_ip --mount type=bind,source=$HOME/.config/configstore,target=/home/levo/.config/configstore -v $PWD:/home/levo/work:rw -e LEVO_BASE_URL=${{ inputs.saas-url }} -e LOCAL_USER_ID=$LOCAL_UID -e LOCAL_GROUP_ID=$LOCAL_GID -e TERM=xterm-256color levoai/levo"
        levo login -k ${{ inputs.authorization-key }} -o ${{ inputs.organization-id }}
        set +e
        CMD='levo test --test-plan "${{ inputs.plan }}" --target-url "${{ inputs.target }}"'
        if ${{ inputs.base64_env != '' }}; then
          echo ${{ inputs.base64_env }} | base64 -d > env_from_secrets.yaml
          cat env_from_secrets.yaml
          CMD=$(echo $CMD --env-file env_from_secrets.yaml)
        fi
        if ${{ inputs.report != 'true' }}; then
          CMD=$(echo $CMD --disable-reporting-to-saas)
        fi
        CMD=$(echo $CMD ${{ inputs.cli_extra_args }} --export-junit-xml=/home/levo/work/reports/junit.xml)
        echo Running: $CMD
        eval $CMD
        exit 0
      shell: bash
    - name: Publish Test Results
      id: test-summary
      if: always()
      uses: test-summary/action@v2
      with:
        paths: '**/reports/*.xml'
    - if: inputs.debug == 'true'
      run: cat $PWD/reports/junit.xml
      shell: bash
    - if: inputs.fail-on-failed-tests == 'true' && steps.test-summary.outputs.failed > 0
      run: |
        echo "::error::${{ steps.test-summary.outputs.failed }} tests failed."
        exit 1
      shell: bash
