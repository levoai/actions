name: "Levo Conformance Action"
description: "Run Levo conformance tests in your Github workflows"
inputs:
  plan:
    description: 'Test plan LRN'
    required: true
  target:
    description: 'Target URL to the unit under test'
    required: true
  authorization-key:
    description: 'Authorization key for CLI to run. Get it from https://app.levo.ai/settings/keys'
    required: true
  organization-id:
    description: 'Levo Organization ID'
    required: true
  fail-on-failed-tests:
    description: 'Fail action on failed test cases. Default: true'
    required: true
    default: true
  base64_env:
    description: 'environment.yaml file content base64 encoded'
    required: false
    default: ''
  saas-url:
    description: 'Saas url to report results back'
    required: true
    default: "https://api.levo.ai"
  report:
    description: 'Report schema conformance run result to Saas'
    required: false
    default: true
  cli_extra_args:
    description: 'CLI extra arguments. E.g: -H "Authorization: Bearer 123'
    required: false
    default: ""
outputs:
  success:
    description: 'Succeeded test cases'
    value: ${{ steps.run-test-plan.outputs.success }}
  failed:
    description: 'Failed test cases'
    value: ${{ steps.run-test-plan.outputs.failed }}
  skipped:
    description: 'Skipped test cases'
    value: ${{ steps.run-test-plan.outputs.skipped }}
runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - id: run-test-plan
      run: |
        # Enable aliases since this is non-interactive shell
        shopt -s expand_aliases
        export LOCAL_UID=`id -u`
        export LOCAL_GID=`id -g`
        alias levo="sudo docker run --rm --add-host=host.docker.internal:`ip route|awk '/docker0/ { print $9 }'` --mount type=bind,source=$HOME/.config/configstore,target=/home/levo/.config/configstore -v $PWD:/home/levo/work:rw -e LEVO_BASE_URL=${{ inputs.saas-url }} -e LOCAL_USER_ID=$LOCAL_UID -e LOCAL_GROUP_ID=$LOCAL_GID -e TERM=xterm-256color -t levoai/levo"
        levo login -k ${{ inputs.authorization-key }} -o ${{ inputs.organization-id }}
        set +e
        CMD='levo test --test-plan "${{ inputs.plan }}" --target-url "${{ inputs.target }}"'
        if ${{ inputs.base64_env != '' }}; then
          echo ${{ inputs.base64_env }} | base64 -d > env_from_secrets.yaml
          cat env_from_secrets.yaml
          CMD=$(echo $CMD --env-file env_from_secrets.yaml)
        fi
        if ${{ ! inputs.report }}; then
          CMD=$(echo $CMD --disable-reporting-to-saas)
        fi
        CMD=$(echo $CMD ${{ inputs.cli_extra_args }})
        eval $CMD | tee /tmp/plan.log
        SUCCESS=$(grep -oEi "[0-9]+ tests passed, [0-9]+ tests failed, [0-9]+ tests skipped" /tmp/plan.log | grep -oEi "[0-9]+ tests passed" | grep -oEi "[0-9]+")
        FAILED=$(grep -oEi "[0-9]+ tests passed, [0-9]+ tests failed, [0-9]+ tests skipped" /tmp/plan.log | grep -oEi "[0-9]+ tests failed" | grep -oEi "[0-9]+")
        SKIPPED=$(grep -oEi "[0-9]+ tests passed, [0-9]+ tests failed, [0-9]+ tests skipped" /tmp/plan.log | grep -oEi "[0-9]+ tests skipped" | grep -oEi "[0-9]+")
        echo "::set-output name=success::$(echo $SUCCESS)"
        echo "::set-output name=failed::$(echo $FAILED)"
        echo "::set-output name=skipped::$(echo $SKIPPED)"
      shell: bash
    - run: |
        echo ${{steps.run-test-plan.outputs.failed}} Failed Test Cases
        echo ${{steps.run-test-plan.outputs.success}} Success Test Cases
        echo ${{steps.run-test-plan.outputs.skipped}} Skipped Test Cases
        if ${{ inputs.fail-on-failed-tests == true && steps.run-test-plan.outputs.failed > 0 }}; then
          exit 1
        fi
      shell: bash